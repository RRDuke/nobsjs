'use strict';

var path = require('path');
var Promise = require('bluebird');
var jwt = require('jwt-simple');
var db = require(path.resolve('./lib/db.js'));

var User = db.User;

var config = require(path.resolve('./lib/config'));

/**
 * Render the index page for the angular application.
 * 
 * @param {ExpressRequestObject} req 
 * @param {ExpressResponseObject} res 
 */

exports.renderIndex = function(req, res) {
  Promise.all([db.Page.findAll(), db.Tab.findAll()])
  .then(function (results) {
    res.render(path.resolve('./modules/core/server/views/index.core.view.server.html'), {
      pages: results[0],
      tabs: results[1]
    });
  })
  .catch(function () {
    res.status(500).send('Database Error Occured');
  });
};

/**
 * Login Api Controller
 *
 * @param {Object} req The request object generated by express.
 * @param {Object} res The response object generated by express. 
 */
exports.logIn = function(req, res) {
  // Force the user's email to lowercase
  var email = req.body.email.toLowerCase();
  var password = req.body.password;

  // Query the database for the user by email
  User.findOne({
    where: {
      email: email
    }
  })
  .then(function (user) {
    // Check to see if the user was found.
    if (!user) {
      // No user was found.
      res.status(400).send('User does not exist or password is incorrect');
    } else {
      // User was Found
      // compare the provided password to the password in the database
      return user.comparePassword(password)
        .then(function (isMatch){
          // Check to see if the passwords match
          if (isMatch) {
            // The passwords match
            // Create a user object to send to the client
            var userResponse = {
              email: user.email
            };

            // Get the Roles associated with the user
            user.getRoles()
            .then(function (roles) {
              // Set the Roles to the user object being sent to the client
              userResponse.roles = roles;

              // Create a token, and encode the userResponse
              var token = jwt.encode(userResponse, config.secret);

              // Send the token and user object to the client
              res.json({
                token: token,
                user: userResponse
              });
            });
          } else {
            // Passwords do not match
            res.status(400).send('User does not exist or password is incorrect');
          }
        })
        .catch(function (err){
          // Invalid Password
          res.status(400).send('Invalid Password');
        });
    }
  })
  .catch(function (e) {
    // There was an error somewhere along the line, and it probably wasn't the users fault.
    res.status(500).send('An error occured while logging in.');
  });
};

exports.signUp = function (req, res) {
  // Force the email to lowercase
  var email = req.body.email.toLowerCase();
  var password = req.body.password;

  User.create({
    email: email,
    password: password
  })
  .then(function (user) {
    var token = jwt.encode(user, config.secret);
    res.json({
      token: token,
      user:{
        email: user.email,
        //MOCK of roles. Need to figure this out still
        roles: ['admin']
      }
    });
  })
  .catch(function (e) {
    res.status(400).send(e.message);
  });
};

exports.checkAuth = function (req, res, next) {
  var token = req.headers['x-access-token'];
  if (!token) {
    res.status(403).send('no token provided');
  } else {
    var user = jwt.decode(token, config.secret);
    User.findOne({where: {email: user.email}})
      .then(function (foundUser) {
        if (foundUser) {
          res.status(200).json({
            user: {
              email: foundUser.email,
              //MOCK of roles. Need to figure this out
              roles: ['admin']
            }
          });
        } else {
          res.status(401).send('User does not exist');
        }
      })
      .catch(function (e) {
        next(e);
      });
  }
};

exports.decode = function(req, res, next){
  var token = req.headers['x-access-token'];
  var user;

  if (!token) {
    return res.send(403); // send forbidden if a token is not provided
  }

  try {
    // decode token and attach user to the request
    // for use inside our controllers
    user = jwt.decode(token, config.secret);
    req.user = user;
    next();
  } catch(error) {
    return next(error);
  }
};
